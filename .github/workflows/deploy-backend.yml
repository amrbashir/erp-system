name: Deploy Backend to AWS ECS

on:
  push:
    branches:
      - master
    paths:
      - "packages/backend/**"
      - "packages/utils/**"
      - ".github/workflows/deploy-backend.yml"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Enable corepack
        run: corepack enable

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
        run: |
          docker build -f packages/backend/deployment/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in task definition template
        id: task-def
        run: |
          cp packages/backend/deployment/task-definition.json task-definition.json
          sed -i "s|\${aws_account_id}|${{ secrets.AWS_ACCOUNT_ID }}|g" task-definition.json
          sed -i "s|\${aws_region}|${{ secrets.AWS_REGION }}|g" task-definition.json
          sed -i "s|\${aws_ecs_task_family}|${{ secrets.AWS_ECS_TASK_FAMILY }}|g" task-definition.json
          sed -i "s|\${aws_ecs_execution_role}|${{ secrets.AWS_ECS_EXECUTION_ROLE }}|g" task-definition.json
          sed -i "s|\${aws_ecs_task_role}|${{ secrets.AWS_ECS_TASK_ROLE }}|g" task-definition.json
          sed -i "s|\${aws_ecs_container_name}|${{ secrets.AWS_ECS_CONTAINER_NAME }}|g" task-definition.json
          sed -i "s|\${aws_ecr_repository}|${{ secrets.AWS_ECR_REPOSITORY }}|g" task-definition.json
          sed -i "s|\${aws_image_tag}|${{ github.sha }}|g" task-definition.json
          sed -i "s|\${aws_ssm_parameter_path}|${{ secrets.AWS_SSM_PARAMETER_PATH }}|g" task-definition.json

      - name: Register task definition
        id: register-task-def
        run: |
          echo "taskDefinitionArn=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)" >> $GITHUB_OUTPUT

      - name: Fill in service definition template
        id: service-def
        run: |
          cp packages/backend/deployment/service-definition.json service-definition.json
          sed -i "s|\${aws_account_id}|${{ secrets.AWS_ACCOUNT_ID }}|g" service-definition.json
          sed -i "s|\${aws_region}|${{ secrets.AWS_REGION }}|g" service-definition.json
          sed -i "s|\${aws_ecs_cluster}|${{ secrets.AWS_ECS_CLUSTER }}|g" service-definition.json
          sed -i "s|\${aws_ecs_service}|${{ secrets.AWS_ECS_SERVICE }}|g" service-definition.json
          sed -i "s|\${aws_task_definition}|${{ steps.register-task-def.outputs.taskDefinitionArn }}|g" service-definition.json
          sed -i "s|\${aws_ecs_subnet_id_1}|${{ secrets.AWS_ECS_SUBNET_ID_1 }}|g" service-definition.json
          sed -i "s|\${aws_ecs_subnet_id_2}|${{ secrets.AWS_ECS_SUBNET_ID_2 }}|g" service-definition.json
          sed -i "s|\${aws_ecs_security_group}|${{ secrets.AWS_ECS_SECURITY_GROUP }}|g" service-definition.json
          sed -i "s|\${aws_lb_target_group_name}|${{ secrets.AWS_LB_TARGET_GROUP_NAME }}|g" service-definition.json
          sed -i "s|\${aws_lb_target_group_id}|${{ secrets.AWS_LB_TARGET_GROUP_ID }}|g" service-definition.json
          sed -i "s|\${aws_ecs_container_name}|${{ secrets.AWS_ECS_CONTAINER_NAME }}|g" service-definition.json

      - name: Deploy Amazon ECS task definition
        run: |
          aws ecs update-service --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
                                --service ${{ secrets.AWS_ECS_SERVICE }} \
                                --task-definition ${{ steps.register-task-def.outputs.taskDefinitionArn }} \
                                --force-new-deployment \
                                --cli-input-json file://service-definition.json

      - name: Wait for stable service
        run: |
          aws ecs wait services-stable --cluster ${{ secrets.AWS_ECS_CLUSTER }} --services ${{ secrets.AWS_ECS_SERVICE }}
