/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OrgRouteImport } from './routes/org'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrgOrgSlugIndexRouteImport } from './routes/org.$orgSlug.index'
import { Route as OrgOrgSlugUsersRouteImport } from './routes/org.$orgSlug.users'
import { Route as OrgOrgSlugLoginRouteImport } from './routes/org.$orgSlug.login'
import { Route as OrgOrgSlugCustomersRouteImport } from './routes/org.$orgSlug.customers'

const OrgRoute = OrgRouteImport.update({
  id: '/org',
  path: '/org',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgOrgSlugIndexRoute = OrgOrgSlugIndexRouteImport.update({
  id: '/$orgSlug/',
  path: '/$orgSlug/',
  getParentRoute: () => OrgRoute,
} as any)
const OrgOrgSlugUsersRoute = OrgOrgSlugUsersRouteImport.update({
  id: '/$orgSlug/users',
  path: '/$orgSlug/users',
  getParentRoute: () => OrgRoute,
} as any)
const OrgOrgSlugLoginRoute = OrgOrgSlugLoginRouteImport.update({
  id: '/$orgSlug/login',
  path: '/$orgSlug/login',
  getParentRoute: () => OrgRoute,
} as any)
const OrgOrgSlugCustomersRoute = OrgOrgSlugCustomersRouteImport.update({
  id: '/$orgSlug/customers',
  path: '/$orgSlug/customers',
  getParentRoute: () => OrgRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/org': typeof OrgRouteWithChildren
  '/org/$orgSlug/customers': typeof OrgOrgSlugCustomersRoute
  '/org/$orgSlug/login': typeof OrgOrgSlugLoginRoute
  '/org/$orgSlug/users': typeof OrgOrgSlugUsersRoute
  '/org/$orgSlug': typeof OrgOrgSlugIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/org': typeof OrgRouteWithChildren
  '/org/$orgSlug/customers': typeof OrgOrgSlugCustomersRoute
  '/org/$orgSlug/login': typeof OrgOrgSlugLoginRoute
  '/org/$orgSlug/users': typeof OrgOrgSlugUsersRoute
  '/org/$orgSlug': typeof OrgOrgSlugIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/org': typeof OrgRouteWithChildren
  '/org/$orgSlug/customers': typeof OrgOrgSlugCustomersRoute
  '/org/$orgSlug/login': typeof OrgOrgSlugLoginRoute
  '/org/$orgSlug/users': typeof OrgOrgSlugUsersRoute
  '/org/$orgSlug/': typeof OrgOrgSlugIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/org'
    | '/org/$orgSlug/customers'
    | '/org/$orgSlug/login'
    | '/org/$orgSlug/users'
    | '/org/$orgSlug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/org'
    | '/org/$orgSlug/customers'
    | '/org/$orgSlug/login'
    | '/org/$orgSlug/users'
    | '/org/$orgSlug'
  id:
    | '__root__'
    | '/'
    | '/org'
    | '/org/$orgSlug/customers'
    | '/org/$orgSlug/login'
    | '/org/$orgSlug/users'
    | '/org/$orgSlug/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrgRoute: typeof OrgRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/org': {
      id: '/org'
      path: '/org'
      fullPath: '/org'
      preLoaderRoute: typeof OrgRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/$orgSlug/': {
      id: '/org/$orgSlug/'
      path: '/$orgSlug'
      fullPath: '/org/$orgSlug'
      preLoaderRoute: typeof OrgOrgSlugIndexRouteImport
      parentRoute: typeof OrgRoute
    }
    '/org/$orgSlug/users': {
      id: '/org/$orgSlug/users'
      path: '/$orgSlug/users'
      fullPath: '/org/$orgSlug/users'
      preLoaderRoute: typeof OrgOrgSlugUsersRouteImport
      parentRoute: typeof OrgRoute
    }
    '/org/$orgSlug/login': {
      id: '/org/$orgSlug/login'
      path: '/$orgSlug/login'
      fullPath: '/org/$orgSlug/login'
      preLoaderRoute: typeof OrgOrgSlugLoginRouteImport
      parentRoute: typeof OrgRoute
    }
    '/org/$orgSlug/customers': {
      id: '/org/$orgSlug/customers'
      path: '/$orgSlug/customers'
      fullPath: '/org/$orgSlug/customers'
      preLoaderRoute: typeof OrgOrgSlugCustomersRouteImport
      parentRoute: typeof OrgRoute
    }
  }
}

interface OrgRouteChildren {
  OrgOrgSlugCustomersRoute: typeof OrgOrgSlugCustomersRoute
  OrgOrgSlugLoginRoute: typeof OrgOrgSlugLoginRoute
  OrgOrgSlugUsersRoute: typeof OrgOrgSlugUsersRoute
  OrgOrgSlugIndexRoute: typeof OrgOrgSlugIndexRoute
}

const OrgRouteChildren: OrgRouteChildren = {
  OrgOrgSlugCustomersRoute: OrgOrgSlugCustomersRoute,
  OrgOrgSlugLoginRoute: OrgOrgSlugLoginRoute,
  OrgOrgSlugUsersRoute: OrgOrgSlugUsersRoute,
  OrgOrgSlugIndexRoute: OrgOrgSlugIndexRoute,
}

const OrgRouteWithChildren = OrgRoute._addFileChildren(OrgRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrgRoute: OrgRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
