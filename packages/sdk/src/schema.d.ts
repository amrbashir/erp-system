/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/orgs/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OrgController$1_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["OrgController$1_getBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/addBalance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["OrgController$1_addBalance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/users/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController$1_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["UserController$1_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController$1_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController$1_logout"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CustomerController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/customers/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CustomerController$1_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/customers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CustomerController$1_getById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/customers/{id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["CustomerController$1_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ProductController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/products/{id}/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ProductController$1_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TransactionController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/transactions/customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TransactionController$1_getByCustomerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InvoiceController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/invoices/createSale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InvoiceController$1_createSale"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/invoices/createPurchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["InvoiceController$1_createPurchase"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/invoices/customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["InvoiceController$1_getByCustomerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/expenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ExpenseController$1_getAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{orgSlug}/expenses/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ExpenseController$1_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["HealthController$1_check"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateOrgDto: {
            name: string;
            slug?: string;
            username: string;
            password: string;
        };
        OrganizationEntity: {
            id: string;
            name: string;
            slug: string;
            balance?: string;
        };
        AddBalanceDto: {
            amount: string;
        };
        UserEntity: {
            id: string;
            username: string;
            /** @enum {string} */
            role: "USER" | "ADMIN";
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt?: string;
        };
        CreateUserDto: {
            username: string;
            password: string;
            /** @enum {string} */
            role?: "USER" | "ADMIN";
        };
        LoginUserDto: {
            username: string;
            password: string;
        };
        LoginResponseDto: {
            username: string;
            /** @enum {string} */
            role: "USER" | "ADMIN";
            orgSlug: string;
        };
        CustomerDetails: {
            /** Format: number */
            owes: string;
            /** Format: number */
            owed: string;
        };
        CustomerEntity: {
            id: number;
            name: string;
            address?: string;
            phone?: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            /** Format: date-time */
            deletedAt?: string;
            details?: components["schemas"]["CustomerDetails"];
        };
        CreateCustomerDto: {
            name: string;
            address?: string;
            phone?: string;
        };
        UpdateCustomerDto: {
            name: string;
            address?: string;
            phone?: string;
        };
        ProductEntity: {
            id: string;
            barcode?: string;
            description: string;
            /** Format: number */
            purchasePrice: string;
            /** Format: number */
            sellingPrice: string;
            stockQuantity: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateProductDto: {
            barcode?: string;
            description?: string;
            /** Format: number */
            purchasePrice?: string;
            /** Format: number */
            sellingPrice?: string;
            stockQuantity?: number;
        };
        TransactionEntity: {
            id: number;
            /** @enum {string} */
            type: "INVOICE" | "EXPENSE" | "BALANCE_ADDITION";
            /** Format: number */
            amount: string;
            /** Format: date-time */
            createdAt: string;
            cashierUsername: string;
            customerName?: string;
        };
        InvoiceItemEntity: {
            barcode?: string;
            description: string;
            /** Format: number */
            price: string;
            /** Format: number */
            purchasePrice: string;
            /** Format: number */
            sellingPrice: string;
            quantity: number;
            /** Format: number */
            discountPercent: number;
            /** Format: number */
            discountAmount: string;
            /** Format: number */
            subtotal: string;
            /** Format: number */
            total: string;
        };
        InvoiceEntity: {
            id: number;
            /** @enum {string} */
            type: "SALE" | "PURCHASE";
            /** Format: number */
            subtotal: string;
            discountPercent: number;
            /** Format: number */
            discountAmount: string;
            /** Format: number */
            total: string;
            /** Format: number */
            paid: string;
            /** Format: number */
            remaining: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            cashierName: string;
            customerName?: string;
            transactionId: number;
            items: components["schemas"]["InvoiceItemEntity"][];
        };
        CreateSaleInvoiceItemDto: {
            productId: string;
            /** Format: number */
            price: string;
            quantity: number;
            discountPercent?: number;
            /** Format: number */
            discountAmount?: string;
        };
        CreateSaleInvoiceDto: {
            customerId?: number;
            items: components["schemas"]["CreateSaleInvoiceItemDto"][];
            discountPercent?: number;
            /** Format: number */
            discountAmount?: string;
            /** Format: number */
            paid: string;
        };
        CreatePurchaseInvoiceItemDto: {
            productId?: string;
            barcode?: string;
            description?: string;
            /** Format: number */
            purchasePrice: string;
            /** Format: number */
            sellingPrice: string;
            quantity: number;
            discountPercent?: number;
            /** Format: number */
            discountAmount?: string;
        };
        CreatePurchaseInvoiceDto: {
            customerId?: number;
            discountPercent?: number;
            /** Format: number */
            discountAmount?: string;
            /** Format: number */
            paid: string;
            items: components["schemas"]["CreatePurchaseInvoiceItemDto"][];
        };
        ExpenseEntity: {
            id: number;
            description: string;
            /** Format: number */
            amount: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            cashierName: string;
            transactionId: number;
        };
        CreateExpenseDto: {
            description: string;
            /** Format: number */
            amount: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    OrgController$1_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrgDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    OrgController$1_getBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationEntity"];
                };
            };
        };
    };
    OrgController$1_addBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddBalanceDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"][];
                };
            };
        };
    };
    UserController$1_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController$1_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController$1_login: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
        };
    };
    AuthController$1_logout: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CustomerController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerEntity"][];
                };
            };
        };
    };
    CustomerController$1_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCustomerDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerEntity"];
                };
            };
        };
    };
    CustomerController$1_getById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerEntity"];
                };
            };
        };
    };
    CustomerController$1_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCustomerDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerEntity"];
                };
            };
        };
    };
    ProductController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductEntity"][];
                };
            };
        };
    };
    ProductController$1_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductEntity"];
                };
            };
        };
    };
    TransactionController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionEntity"][];
                };
            };
        };
    };
    TransactionController$1_getByCustomerId: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
                customerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionEntity"][];
                };
            };
        };
    };
    InvoiceController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
                type?: "SALE" | "PURCHASE";
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceEntity"][];
                };
            };
        };
    };
    InvoiceController$1_createSale: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSaleInvoiceDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceController$1_createPurchase: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePurchaseInvoiceDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InvoiceController$1_getByCustomerId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
                customerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceEntity"][];
                };
            };
        };
    };
    ExpenseController$1_getAll: {
        parameters: {
            query?: {
                skip?: number;
                take?: number;
            };
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseEntity"][];
                };
            };
        };
    };
    ExpenseController$1_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orgSlug: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateExpenseDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseEntity"];
                };
            };
        };
    };
    HealthController$1_check: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Health Check is successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {} */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
            /** @description The Health Check is not successful */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example error */
                        status?: string;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       }
                         *     } */
                        info?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        error?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        } | null;
                        /** @example {
                         *       "database": {
                         *         "status": "up"
                         *       },
                         *       "redis": {
                         *         "status": "down",
                         *         "message": "Could not connect"
                         *       }
                         *     } */
                        details?: {
                            [key: string]: {
                                status: string;
                            } & {
                                [key: string]: unknown;
                            };
                        };
                    };
                };
            };
        };
    };
}
